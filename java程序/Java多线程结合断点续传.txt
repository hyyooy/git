package com.fyt.multidownload;
 
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;
 
public class MultiDownload {
 
	//下载文件时开启的线程的个数
	static int ThreadCount = 3;
	
	//结束的线程的个数
	static int finishedThread = 0;
	
	//设置文件的下载地址
	static String path = "http://192.168.0.101:8080/app/genymotion-2.2.0-vbox.exe";
	
	public static void main(String[] args) {
		
		try {
			
			//将下载地址封装成Url对象
			URL url = new URL(path);
			
			//创建连接对象,此时未建立连接
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			
			//设置请求方式为get请求
			conn.setRequestMethod("GET");
			
			//设置连接超时
			conn.setConnectTimeout(5000);
			
			//设置读取超时
			conn.setReadTimeout(5000);
			
			//如果请求发送成功
			if(conn.getResponseCode() == 200) {
				
				//获得需要下载的文件的长度
				int length = conn.getContentLength();
				
				//创建File对象
				File file = new File("genymotion-2.2.0-vbox.exe");
				
				//生成临时文件(临时文件的大小为下载的文件的大小)
				RandomAccessFile raf = new RandomAccessFile(file, "rwd");
				
				//设置临时文件的大小
				raf.setLength(length);
				
				//关闭临时文件
				raf.close();
				
				//计算出每个线程应该下载多少字节
				int size = length / ThreadCount;
				
				//遍历创建好的线程
				for (int i = 0; i < ThreadCount; i++) {
					
					//计算线程下载的开始位置
					int startIndex = i * size;
					
					//计算线程下载的结束位置
					int endIndex = (i + 1) * size - 1;
					
					//如果是最后一个线程，那么结束位置写死
					if(i == ThreadCount - 1)
					{
						endIndex = length - 1;
					}
					
					//System.out.println("线程" + i + "的下载区间是：" + startIndex + "---" + endIndex);
				
					//创建下载线程
					//第一个参数:下载开始的位置
					//第二个参数:下载结束的位置
					//第三个参数:线程的Id
					DownLoadThread thread = new DownLoadThread(startIndex, endIndex, i);
					
					//启动下载线程
					thread.start();
				}
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
	}
}
 
 
//创建一个继承自线程类的下载线程类
class DownLoadThread extends Thread {
	
	//线程下载的开始位置
	int startIndex;
	
	//线程下载的结束位置
	int endIndex;
	
	//线程的Id
	int threadId;
	
	//下载线程的构造方法
	public DownLoadThread(int startIndex, int endIndex, int threadId) {
		super();
		
		//设置线程下载的开始位置
		this.startIndex = startIndex;
		
		//设置线程下载的结束位置
		this.endIndex = endIndex;
		
		//设置线程的Id
		this.threadId = threadId;
	}
 
	//执行线程
	@Override
	public void run() {
		
		try {
			
			//创建保存下载进度的临时文件
			File progressFile = new File(threadId + ".txt");
			
			//如果进度临时文件存在
			if(progressFile.exists()) {
				
				//创建文件输入流
				FileInputStream fis = new FileInputStream(progressFile);
				
				//InputStreamReader:创建文件的输入流缓冲区对象
				//BufferedReader:创建文件的读取缓冲区对象
				BufferedReader br = new BufferedReader(new InputStreamReader(fis));
				
				//从进度临时文件中读取出上一次下载的总进度
				//然后与原本的开始位置相加，得到新的开始位置
				startIndex += Integer.parseInt(br.readLine());
				
				//关闭文件输入流
				fis.close();
			}
			
			//System.out.println("线程" + threadId + "的下载区间是：" + startIndex + "---" + endIndex);
			
			//使用URL对象封装下载文件的地址
			URL url = new URL(MultiDownload.path);
			
			//创建连接对象,此时未建立连接
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			
			//设置请求方式为get请求
			conn.setRequestMethod("GET");
			
			//设置连接超时
			conn.setConnectTimeout(5000);
			
			//设置读取超时
			conn.setReadTimeout(5000);
			
			//设置本次http请求所请求的数据的区间
			conn.setRequestProperty("Range", "bytes=" + startIndex + "-" + endIndex);
			
			//请求部分数据
			//请求部分数据请求成功的响应码是206
			if(conn.getResponseCode() == 206) {
				
				//流里此时只有1/3原文件的数据
				//从响应中获取文件输入流
				InputStream is = conn.getInputStream();
				
				byte[] b = new byte[1024];
				int len = 0;
				int total = 0;
				
				//拿到临时文件的输出流
				File file = new File("genymotion-2.2.0-vbox.exe");
				
				//创建一个临时文件
				RandomAccessFile raf = new RandomAccessFile(file, "rwd");
				
				//把文件的写入位置移动至startIndex
				raf.seek(startIndex);
				
				while((len = is.read(b)) != -1) {
					
					//每次读取流里数据之后，同步把数据写入临时文件
					raf.write(b, 0, len);
					total += len;
					
					//System.out.println("线程" + threadId + "下载了" + total);
					
					//生成一个专门用来记录下载进度的临时文件
					RandomAccessFile progressRaf = new RandomAccessFile(progressFile, "rwd");
					
					//每次读取流里数据之后，同步把当前线程下载的总进度写入进度临时文件中
					progressRaf.write((total + "").getBytes());
					
					//关闭进度临时文件
					progressRaf.close();
				}
				
				System.out.println("线程" + threadId + "下载完毕-------------------小志参上！");
				
				//关闭临时文件
				raf.close();
				
				//完成下载的线程的个数增加1
				MultiDownload.finishedThread++;
				
				//MultiDownload.path表示文件的下载地址
				synchronized (MultiDownload.path) {
					
					//如果三个下载线程都完成了下载任务
					if(MultiDownload.finishedThread == MultiDownload.ThreadCount) {
						
						//变量所有的下载线程所在的临时文件
						for (int i = 0; i < MultiDownload.ThreadCount; i++) {
							
							//获得下载线程下载的临时文件
							File f = new File(i + ".txt");
							
							//删除下载线程下载的临时文件
							f.delete();
						}
						
						//设置结束下载任务的下载线程的个数为0
						MultiDownload.finishedThread = 0;
					}
				}
			}
		} catch (Exception e) {
			
			e.printStackTrace();
		}
	}
}
